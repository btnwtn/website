[{"meta":{"title":"Higher-Order Components(HOCs) for Beginners","excerpt":"A gentle introduction to Higher-Order Components","image":"/images/hoc-for-beginners.jpg","published":"Nov 2, 2016","slug":"higher-order-componentshocs-for-beginners"},"content":"<h2>Preface</h2>\n<p>I'm writing this because literally every other article—including the official\nReact documentation on <a href=\"https://facebook.github.io/react/docs/higher-order-components.html\">Higher-Order Components</a>—confused the hell out of me as a beginner. For example &quot;Use HOCs For Cross-Cutting Concerns&quot;(wtf does that even mean?). Even more confusing, the docs then make reference to an API that has been deprecated for nearly a year. But, I digress.</p>\n<p>Before we can understand HOCs we must first understand some things about\nfunctions in Javascript.</p>\n<h2>Functions as Values and Partial Application</h2>\n<p>Just like numbers, strings, booleans, etc., <em>functions are values</em>. That means\nthat you can pass functions around like any other data. You can pass a function\nas an argument to another function:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> execute <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someFunction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Executed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>And you can return a function from a function.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getOne <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n\n<span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>The reason we have two <code>()</code> after <code>getOne</code> is that the first application of the\nfunction returns another. To illustrate:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getOne <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n\ngetOne\n<span class=\"token comment\" spellcheck=\"true\">//=> () => () => 1</span>\n\n<span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> () => 1</span>\n\n<span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> 1</span>\n</code></pre>\n<p>The cool thing about returning functions from functions is that we can write\nfunctions that keep track of their initial input. For example, the function\nbelow accepts a number as an argument and returns a function that multiplies\nthat argument by a new one:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> multiply <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x <span class=\"token operator\">*</span> y\n\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>This example works the same as <code>getOne</code>, each parenthesis applies the function\nto some input. In this case we are assigning <code>x</code> to <code>5</code> and <code>y</code> to <code>20</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> multiply <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x <span class=\"token operator\">*</span> y\n\nmultiply\n<span class=\"token comment\" spellcheck=\"true\">//=> (x) => (y) => x * y</span>\n\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> (y) => 5 * 20</span>\n\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> 100</span>\n</code></pre>\n<p>When we call the function <code>multiply</code> with only one argument we are doing\nsomething called partial application. When we call <code>multiply(5)</code> we get a function that will multiply it's input by 5. If we call <code>multiply(7)</code> we get a function that will multiply it's input by 7, and so on. We can use partial application to create new functions with a predefined input:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> multiply <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x <span class=\"token operator\">*</span> y\n\n<span class=\"token keyword\">const</span> multiplyByFive <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> multiplyBy100 <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">multiplyByFive</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> 100</span>\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> 100</span>\n\n<span class=\"token function\">multiplyBy100</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> 500</span>\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> 500</span>\n</code></pre>\n<p>This may not seem super useful at first. However, you can use partial application to write code that is easier to read and reason about. For example, we can replace <a href=\"https://www.styled-components.com/docs/basics#adapting-based-on-props\"><code>styled-components</code></a> complex function interpolation syntax with something a bit cleaner.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// before</span>\n<span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token string\">`\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> theme <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) => theme.bgColor}\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> theme <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) => theme.textColor}\n`</span></span>\n\n<span class=\"token operator\">&lt;</span>Button theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">.</span>primary<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n</code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// after</span>\n<span class=\"token keyword\">const</span> fromTheme <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> theme <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> theme<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token string\">`\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">fromTheme</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bgColor\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">fromTheme</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"textColor\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n`</span></span>\n\n<span class=\"token operator\">&lt;</span>Button theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">.</span>primary<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n</code></pre>\n<p>This is a prime example of partial application. We create a function that accepts a string as a parameter: <code>fromTheme(&quot;textColor&quot;)</code>, which returns a function accepting an object with a <code>theme</code> property: <code>({ theme }) =&gt; theme[prop]</code>, which we then attempt to lookup via the initial string we passed in <code>&quot;textColor&quot;</code>. We could go furthur and write functions like <code>backgroundColor</code> and <code>textColor</code> that partially apply the <code>fromTheme</code> function:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fromTheme <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> theme <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> theme<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> backgroundColor <span class=\"token operator\">=</span> <span class=\"token function\">fromTheme</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bgColor\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> textColor <span class=\"token operator\">=</span> <span class=\"token function\">fromTheme</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"textColor\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token string\">`\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>backgroundColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>textColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n`</span></span>\n</code></pre>\n<h2>Higher-Order Functions</h2>\n<p>Higher-order functions are defined as functions that accept a function as an argument. You may already be familiar with higher-order functions if you've ever used a function like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map</code></a>. If you aren't familiar with <code>map</code>, it is a function that loops over and applies a function to every element in an array. For example, you can square an array of numbers like so:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> [ 1, 4, 9 ]</span>\n</code></pre>\n<p>We can write our own version of <code>map</code> to illustrate this concept:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mappedArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mappedArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\" spellcheck=\"true\">// apply fn with the current element of the array</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> mappedArray\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>We can then use our version of <code>map</code> to do something like square an array of numbers:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> square <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x <span class=\"token operator\">*</span> x\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//=> [ 1, 4, 9, 16, 25 ]</span>\n</code></pre>\n<p>Or return an array of <code>&lt;li&gt;</code> React Elements:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> HeroList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> heroes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hero<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>hero<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> heroes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span>HeroList heroes<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"Wonder Woman\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Black Widow\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Spider Man\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Storm\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Deadpool\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">/*=> (\n  &lt;ul>\n    &lt;li>Wonder Woman&lt;/li>\n    &lt;li>Black Widow&lt;/li>\n    &lt;li>Spider Man&lt;/li>\n    &lt;li>Storm&lt;/li>\n    &lt;li>Deadpool&lt;/li>\n  &lt;/ul>\n)*/</span>\n</code></pre>\n<h2>Higher-Order Components</h2>\n<p>We know that a higher-order function is a function that accepts a function as an argument. In React, any function that returns JSX is known as a Stateless Functional Component, or Functional Component for short. A basic Functional Component looks like this:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Title <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>Title<span class=\"token operator\">></span>Higher<span class=\"token operator\">-</span>Order <span class=\"token function\">Components</span><span class=\"token punctuation\">(</span>HOCs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> React Newbies<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Title<span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//=> &lt;h1>Higher-Order Components(HOCs) for React Newbies&lt;/h1></span>\n</code></pre>\n<p>A higher-order component <strong>is a function that accepts a Component as an argument and returns a Component</strong>. How you use the passed Component is up to you. You can even completely disregard it:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// Technically an HOC</span>\n<span class=\"token keyword\">const</span> ignore <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Anything<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> Title <span class=\"token operator\">=</span> <span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span>HeroList<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Title <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//=> &lt;h1>:)&lt;/h1></span>\n</code></pre>\n<p>You can write an HOC that uppercases it's input:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> yell <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PassedComponent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>PassedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">!</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>PassedComponent<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> Title <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> AngryTitle <span class=\"token operator\">=</span> <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span>Title<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span>AngryTitle<span class=\"token operator\">></span>Whatever<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>AngryTitle<span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//=> &lt;h1>WHATEVER!&lt;/h1></span>\n</code></pre>\n<p>You can return a Stateful Component because classes in Javascript are syntax sugar for functions. This allows you to hook into React Lifecycle methods like <code>componentDidMount</code>. This is where HOCs become really useful, because we can now do things like pass down the result of an XHR request as props to a Functional Component.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> withGists <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PassedComponent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithGists</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      gists<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/gists/public\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span><span class=\"token operator\">></span> r<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>gists <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        gists\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>PassedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span> gists<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>gists<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Gists <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> gists <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>pre<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>gists<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> GistsList <span class=\"token operator\">=</span> <span class=\"token function\">withGists</span><span class=\"token punctuation\">(</span>Gists<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span>GistsList <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//=> Before api request finishes:</span>\n<span class=\"token comment\" spellcheck=\"true\">// &lt;Gists gists={[]} /></span>\n<span class=\"token comment\" spellcheck=\"true\">// </span>\n<span class=\"token comment\" spellcheck=\"true\">//=> After api request finishes:</span>\n<span class=\"token comment\" spellcheck=\"true\">// &lt;Gists gists={[</span>\n<span class=\"token comment\" spellcheck=\"true\">//  { </span><span class=\"token comment\" spellcheck=\"true\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\" spellcheck=\"true\">//  { </span><span class=\"token comment\" spellcheck=\"true\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\" spellcheck=\"true\">//  { </span><span class=\"token comment\" spellcheck=\"true\">/* … */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// ]} /></span>\n</code></pre>\n<p>You can call <code>withGists</code> on any component and it will pass down the result of the gists api call. You can see a more fleshed out example of this <a href=\"https://codesandbox.io/embed/o2YpJnpDj\">here</a>.</p>\n<h2>Conclusion: HOCs are <img class=\"emoji\" draggable=\"false\" alt=\"🔥\" src=\"https://twemoji.maxcdn.com/2/72x72/1f525.png\"><img class=\"emoji\" draggable=\"false\" alt=\"🔥\" src=\"https://twemoji.maxcdn.com/2/72x72/1f525.png\"><img class=\"emoji\" draggable=\"false\" alt=\"🔥\" src=\"https://twemoji.maxcdn.com/2/72x72/1f525.png\"></h2>\n<p>Redux uses an HOC called <code>connect</code> to pass values from your application store to &quot;connected&quot; components. It also does some error checking and component optimizations that, if done manually, would cause your code to become bloated out of control.</p>\n"},{"meta":{"title":"Math: the React.js Way","excerpt":"With react-real-math you don't need confidence; the library handles it for you!","image":"/images/math-js-header.jpg","published":"Jul 14, 2017","slug":"math-the-react.js-way"},"content":"<p>Have you found yourself doing intense math problems using weird symbols like <code>+</code>,\n<code>−</code>, <code>÷</code>, and <code>×</code>? Do you enjoy the speed and developer experience of React.js? Thanks\nto <code>react-real-math</code> you can now harness the power of the React.js Virtual DOM to\nmake your Math blazing <img class=\"emoji\" draggable=\"false\" alt=\"🔥\" src=\"https://twemoji.maxcdn.com/2/72x72/1f525.png\"> fast!</p>\n<p><code>react-real-math</code> provides an incredibly easy to understand API out of the gate,\nfor free. What a deal! Let’s take a look at an example of <code>react-real-math</code> in\naction. Consider this old-school almost obfuscated math problem:</p>\n<blockquote>\n<p>1+1×2=?</p>\n</blockquote>\n<p>Incredibly hard to parse. But with <code>react-real-math</code> this is a breeze to\nunderstand:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> computeValue<span class=\"token punctuation\">,</span> Multiply<span class=\"token punctuation\">,</span> One<span class=\"token punctuation\">,</span> Two <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-real-math'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">computeValue</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Multiply by<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Two<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>One<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Multiply<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Now that’s what I call <img class=\"emoji\" draggable=\"false\" alt=\"💯\" src=\"https://twemoji.maxcdn.com/2/72x72/1f4af.png\"><img class=\"emoji\" draggable=\"false\" alt=\"💯\" src=\"https://twemoji.maxcdn.com/2/72x72/1f4af.png\"><img class=\"emoji\" draggable=\"false\" alt=\"💯\" src=\"https://twemoji.maxcdn.com/2/72x72/1f4af.png\"> family. Blazing fast, amazing DX, and great DSL.\nNot only is this incredibly easy to read, new developers can easily understand\nwhat’s going on here. If you would like to contribute to <code>react-real-math</code> please\ncheck out the project’s Github:</p>\n<p><a href=\"https://github.com/btnwtn/react-real-math\">https://github.com/btnwtn/react-real-math</a></p>\n"}]